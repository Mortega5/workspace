package main

import (
	"strconv"
	"time"
	"fmt"
)

/*type int struct {

	object int
}*/

var almacen = make([]int, 0, 10)

var esperandoLleno = 0
var esperandoVacio = 0

var almacenLleno = make(chan bool)
var almacenVacio = make(chan bool)

func almacenar(channel chan int) {
	// Si esta lleno el almacen espero a que se envie una señal de que ya no esta lleno
	if len(almacen) == cap(almacen) {
		esperandoLleno++
		<-almacenLleno
	}
	// Añadimos el elemento al almacen. Indicamos primero la recepcion por el canal, a modo de exclusion mutua

	elemento := <-channel

	n := len(almacen)
	almacen = almacen[0 : n+1]
	almacen[n] = elemento

	// Indicamos que ya no estamos esperando
	esperandoLleno--

	// Liberacion para consumir
	if esperandoVacio != 0 {

		almacenVacio <- true
	}

}

func lista (channel chan<- string) {

	var envio string
	//fmt.Println(len(almacen))
	for i := 0; i < len(almacen); i++ {
		envio += strconv.Itoa(almacen[i])+ " "
	}
	channel <- envio
}
func consumir(channel chan<- int) {

	if len(almacen) == 0 {
		esperandoVacio++
		<-almacenVacio
	}
	
	esperandoVacio--
	
	elemento := almacen[len(almacen)]
	
	almacen = almacen[0:len(almacen)-1]
	
	channel <- elemento
	
	if esperandoLleno!=0 {
		almacenLleno <- true
	}
	
}

func main() {
	//fmt.Println(len(almacen))

	canal := make(chan int)

	go almacenar(canal)

	go almacenar(canal)

	canal <- 4
	
	canal <- 6
	
	recepcion := make(chan string)
	
	go lista(recepcion)
	//fmt.Print(len(almacen))

	fmt.Println(<-recepcion)

}
