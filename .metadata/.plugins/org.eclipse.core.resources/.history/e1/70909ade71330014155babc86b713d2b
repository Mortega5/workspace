package producto

import (
	"fmt"
	"strconv"
	"sync"
)

// Almacen de datos

var ALMACENAR = "[ALMACENAR]"
var CONSUMIR = "[CONSUMIR]"

// Mutex de exclusion mutua
var mutex = &sync.Mutex{}

type Almacen struct {
	almacen []int
	sync.Mutex
	esperandoLleno int 
	esperandoVacio int
	condicion1 sync.Cond
	condicion2 sync.Cond 
}

// Contador de esperas


// Conditions

func (almacen *Almacen) Almacenar(channel chan int) {
	// Bloqueo de la exclusion mutua
	almacen.Lock()

	// C-Pre
	if len(almacen.almacen) == cap(almacen.almacen) {
		fmt.Println(ALMACENAR, "Espero a poder almacenar: tamaño almacen: ", len(almacen.almacen))
		esperandoLleno++
		almacen.condicion1.Wait()

	}

	elemento := <-channel
	fmt.Println(ALMACENAR, "Voy a almacenar, elementos: ", len(almacen.almacen))

	n := len(almacen.almacen)
	// Seccion critica
	almacen.almacen = almacen.almacen[0 : n+1]
	almacen.almacen[n] = elemento

	fmt.Println(ALMACENAR, "Almaceno el elemento: ", elemento)
	// Indicamos que ya no estamos esperando

	// Post
	if esperandoVacio > 0 {
		esperandoVacio--

		almacen.condicion2.Signal()
	}
	// Liberacion del Mutex
	almacen.Unlock()
}

func (almacen *Almacen) Lista(channel chan<- string) {

	var envio string
	//fmt.Println(len(almacen))
	almacen.Lock()
	for i := 0; i < len(almacen.almacen); i++ {
		envio += strconv.Itoa(almacen.almacen[i]) + " "
	}
	almacen.Unlock()
	channel <- envio
}

func Consumir(channel chan<- int) {
	// Exclusion mutua
	mutex.Lock()

	// C-Pre
	if len(almacen) == 0 {
		fmt.Println(CONSUMIR, "Espero a poder consumir: tamaño almacen: ", len(almacen))
		fmt.Println(CONSUMIR, "Gente esperando a vaciado: ", esperandoLleno)
		esperandoVacio++
		almacenVacio.Wait()

	}
	// Seccion critica

	fmt.Println(CONSUMIR, "Elementos en el almacen al consumir: ", len(almacen))
	elemento := almacen[len(almacen)-1]

	almacen = almacen[0 : len(almacen)-1]

	channel <- elemento
	//fmt.Println(CONSUMIR, "Consumido el elemento: ", elemento)

	// Desbloqueo en cadena
	if esperandoLleno > 0 {
		fmt.Println(CONSUMIR, "Liberando: Gente esperando a vaciado: ", esperandoLleno)
		esperandoLleno--
		fmt.Println(CONSUMIR, "Despierto a alguien que esta esperando")
		almacenLleno.Signal()
	}
	// Liberacion mutex
	mutex.Unlock()
}
